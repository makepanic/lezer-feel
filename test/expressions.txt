# Literals

1
true
false
"FOO";
-1220.12;
.12;

==>

Expressions(
  NumericLiteral,
  BooleanLiteral,
  BooleanLiteral,
  StringLiteral,
  NumericLiteral(ArithOp),
  NumericLiteral
)


# Arithmetic Expression

1+2
1-2
1*2
1^2
1**2
1/2;
-1
1+2*3**5

==>

Expressions(
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  NumericLiteral(ArithOp),
  ArithmeticExpression(NumericLiteral,ArithOp,
    ArithmeticExpression(NumericLiteral,ArithOp,
      ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral)))
)


# Arithmetic Expression (error)

1 * #3

==>

Expressions(
  ArithmeticExpression(NumericLiteral,ArithOp,⚠,NumericLiteral)
)


# Comparison

a = b
a != b
a > b
a < b

a between b and c
a between b() and c-d

INPUT in 10

a in [ 1 .. 4 ]
a in [1..4]
a in ([ 1 .. 4 ])
a in (1..4)
a in (((1..4)))
a in ((1..4), (5..8))
a in (< 20, > 10)

==>

Expressions(
  Comparison(VariableName,CompareOp,VariableName),
  Comparison(VariableName,CompareOp,VariableName),
  Comparison(VariableName,CompareOp,VariableName),
  Comparison(VariableName,CompareOp,VariableName),

  Comparison(VariableName,between,VariableName,and,VariableName),
  Comparison(VariableName,between, FunctionInvocation(...),and,ArithmeticExpression(...)),

  Comparison(VariableName,in,PositiveUnaryTest(NumericLiteral)),

  Comparison(VariableName,in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(VariableName,in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(VariableName,in,PositiveUnaryTest(ParenthesizedExpression("(",SimplePositiveUnaryTest(Interval(...)),")"))),
  Comparison(VariableName,in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(VariableName,in,PositiveUnaryTest(ParenthesizedExpression("(",ParenthesizedExpression(...),")"))),
  Comparison(VariableName,in,"(",PositiveUnaryTests(...),")"),
  Comparison(VariableName,in,"(",PositiveUnaryTests(...),")")
)


# Conjunction and Disjunction

a and b;
a or b;
a and b or c and d

==>

Expressions(
  Conjunction(VariableName,and,VariableName),
  Disjunction(VariableName,or,VariableName),
  Disjunction(
    Conjunction(VariableName,and,VariableName),or,Conjunction(VariableName,and,VariableName)
  )
)


# Parenthesis

(a);
(a + b) * c

==>

Expressions(
  ParenthesizedExpression(...),
  ArithmeticExpression(...)
)


# Context

{}
{ a: a, b: b }
{🐎: "😀"}
{java:{class:"java.lang.Math",method signature:"cos(double)"}}

==>

Expressions(
  Context("{","}"),
  Context("{",ContextEntry(Key(Name),VariableName),ContextEntry(Key(Name),VariableName),"}"),
  Context("{",ContextEntry(Key(Name),StringLiteral),"}"),
  Context("{",
    ContextEntry(Key(Name),Context("{",
      ContextEntry(Key(Name),StringLiteral),
      ContextEntry(Key(SpecialKey(method,signature)),StringLiteral),
    "}")),
  "}")
)


# Context (error)

{

==>

Expressions(
  Context(⚠)
)


# Interval

[a..b];
(a..b);
]a..b[;
[1 .. 2];
(1 .. 2);
]1 .. 2[

==>

Expressions(
  SimplePositiveUnaryTest(Interval("[",QualifiedName(Name),QualifiedName(Name),"]")),
  SimplePositiveUnaryTest(Interval("(",QualifiedName(Name),QualifiedName(Name),")")),
  SimplePositiveUnaryTest(Interval("]",QualifiedName(Name),QualifiedName(Name),"[")),
  SimplePositiveUnaryTest(Interval("[",NumericLiteral,NumericLiteral,"]")),
  SimplePositiveUnaryTest(Interval("(",NumericLiteral,NumericLiteral,")")),
  SimplePositiveUnaryTest(Interval("]",NumericLiteral,NumericLiteral,"["))
)


# Interval (error)

[a..b;
[a..;

==>

Expressions(
  SimplePositiveUnaryTest(Interval("[",QualifiedName(Name),QualifiedName(Name),⚠)),
  SimplePositiveUnaryTest(Interval("[",QualifiedName(Name),⚠))
)


# List

[];
[1];
[1 + 3, 2 * 5];
[a, [1, { a: 1 } ], [], [1 .. 3], (1) ]

==>

Expressions(
  List("[","]"),
  List("[",NumericLiteral,"]"),
  List("[",ArithmeticExpression(...),ArithmeticExpression(...),"]"),
  List(...)
)


# Interval / List (error)

[a;
[

==>

Expressions(
  SimplePositiveUnaryTest(Interval("[",QualifiedName(...),⚠)),
  List("[",⚠)
)


# VariableName

a;
a b

==>

Expressions(
  VariableName,
  VariableName, VariableName
)


# VariableName (error)

a**'s

==>

Expressions(
  ArithmeticExpression(VariableName,ArithOp,⚠,VariableName)
)


# Special Names

date and time
date and other
year

==>

Expressions(
  Conjunction(VariableName,and,VariableName),
  Conjunction(VariableName,and,VariableName),
  VariableName
)


# Quantified Expression

every a in b satisfies c
some a in b satisfies c
every a in b, c in d satisfies c
some a in b, c in d satisfies c

==>

Expressions(
  QuantifiedExpression(every,InExpressions(InExpression(...)),satisfies,VariableName),
  QuantifiedExpression(some,InExpressions(InExpression(...)),satisfies,VariableName),
  QuantifiedExpression(every,InExpressions(InExpression(...),InExpression(...)),satisfies,VariableName),
  QuantifiedExpression(some,InExpressions(InExpression(...),InExpression(...)),satisfies,VariableName)
)


# Filter Expression

a[c];
a[c].b;
["a", "b"][ "b" ]


==>

Expressions(
  FilterExpression(VariableName,"[",VariableName,"]"),
  PathExpression(FilterExpression(VariableName,"[",VariableName,"]"),Name),
  FilterExpression(List("[",StringLiteral,StringLiteral,"]"),"[",StringLiteral,"]")
)


# Path Expression

a.B;
(a).b;
(a).b.c;
a+b.c

==>

Expressions(
  PathExpression(VariableName,Name),
  PathExpression(ParenthesizedExpression(...),Name),
  PathExpression(PathExpression(ParenthesizedExpression(...),Name),Name),
  ArithmeticExpression(VariableName,ArithOp,PathExpression(VariableName,Name))
)


# For Expression

for i in 0..4 return if i = 0 then 1 else i * partial[-1]
for a in c..e return partial[-1]
for a in c return d
for a in c, b in d return d

==>

Expressions(
  ForExpression(for,InExpressions(...),return,IfExpression(...)),
  ForExpression(for,InExpressions(...),return,FilterExpression(...)),
  ForExpression(for,InExpressions(...),return,VariableName),
  ForExpression(for,InExpressions(InExpression(...), InExpression(...)),return,VariableName)
)


# For Expression (error)

for fruit in [ ." ]

==>

Expressions(
  ForExpression(for,InExpressions(...),⚠),
  StringLiteral
)


# Function Definition

function() a
function(a, b) a
function(a, b) external a
function(n1) external {java:{class:"java.lang.Math",method signature:"cos(double)"}}

==>

Expressions(
  FunctionDefinition(function,"(",FormalParameters,")",FunctionBody(...)),
  FunctionDefinition(function,"(",FormalParameters(
    FormalParameter(ParameterName(...)),
    FormalParameter(...)
  ),")",FunctionBody(...)),
  FunctionDefinition(function,"(",FormalParameters(...),")",external,FunctionBody(...)),
  FunctionDefinition(...)
)


# Function Invocation

a()
a(foo: f, bar: b)
a(foo, bar)

a(stringa: f, bar: b)
a(string: f, bar: b)

==>

Expressions(
  FunctionInvocation(VariableName,"(",PositionalParameters(), ")"),
  FunctionInvocation(VariableName,"(",NamedParameters(
    NamedParameter(ParameterName(Name),VariableName),
    NamedParameter(ParameterName(Name),VariableName)
  ),")"),
  FunctionInvocation(VariableName,"(",PositionalParameters(
    VariableName,
    VariableName
  ),")"),
  FunctionInvocation(VariableName,"(",NamedParameters(
    NamedParameter(ParameterName(Name),VariableName),
    NamedParameter(ParameterName(Name),VariableName)
  ),")"),
  FunctionInvocation(VariableName,"(",NamedParameters(
    NamedParameter(ParameterName(Name),VariableName),
    NamedParameter(ParameterName(Name),VariableName)
  ),")")
)


# Date Time Literals

date and time(date("2017-01-01"),time("23:59:01"));
date and  time("2018-12-08T10:30:01");
time("23:59:01")
date("2017-01-01")
duration("P2M")

==>

Expressions(
  DateTimeLiteral(DateTimeConstructor(date,and,time),"(",PositionalParameters(
    DateTimeLiteral(...),
    DateTimeLiteral(...)
  ),")"),
  DateTimeLiteral(...),
  DateTimeLiteral(...),
  DateTimeLiteral(...),
  DateTimeLiteral(...)
)


# Date Time Literals / Comparison

time("10:30:05") in [time("10:30:02")..time("10:30:04")]
duration("P11Y") in [[duration("P5Y") .. duration("P7Y")], [duration("P10Y") .. duration("P12Y")]]
date and time("2018-12-08T10:30:01") in (date and time("2018-12-08T10:30:02")..date and time("2018-12-08T10:30:04")]
date("2018-12-01") in (date("2018-12-02")..date("2018-12-04"));

==>

Expressions(
  Comparison(DateTimeLiteral(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(DateTimeLiteral(...),in,PositiveUnaryTest(List(...))),
  Comparison(DateTimeLiteral(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(DateTimeLiteral(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...))))
)


# Date Time Literals / Conjunction

a > 5 and years and months duration()
years and months duration() and a > 5
date and  time("2018-12-08T10:30:01") and 20

==>

Expressions(
  Conjunction(
    Comparison(...),and,FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")")
  ),
  Conjunction(
    FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")"),and,Comparison(...)
  ),
  Conjunction(DateTimeLiteral(...),and,NumericLiteral)
)


# Special Function Name / Conjunction

years and months duration() and a > 5

==>

Expressions(
  Conjunction(
    FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")"),and,Comparison(...)
  )
)


# Conjunction / Special Function Name

a > 5 and years and months duration()

==>

Expressions(
  Conjunction(
    Comparison(...),and,FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")")
  )
)


# Built-in Functions

not(false)
sort([1, 2, 3])
concatenate([1, 2], [3, 4])
string(5)

substring(string:"foobar",start position :3)
number(from: "1.000.000,01", decimal sep:",", grouping sep:".")
number(from: "1.000.000,01", decimal separator:",", grouping separator:".")

date and time("2018-12-08T10:30:01")
years and months duration()

string(5).length

list contains([1, 2], 1)
distinct values(1, 1, 4)

==>

Expressions(
  FunctionInvocation(VariableName,"(",PositionalParameters(BooleanLiteral),")"),
  FunctionInvocation(VariableName,"(",PositionalParameters(List(...)),")"),
  FunctionInvocation(VariableName,"(",PositionalParameters(List(...),List(...)),")"),
  FunctionInvocation(VariableName,"(",PositionalParameters(NumericLiteral),")"),

  FunctionInvocation(VariableName,"(",NamedParameters(
    NamedParameter(...),
    NamedParameter(ParameterName(SpecialParameterName(start,position)),NumericLiteral)
  ),")"),
  FunctionInvocation(VariableName,"(",NamedParameters(
    NamedParameter(...),
    NamedParameter(ParameterName(SpecialParameterName(decimal,sep)),StringLiteral),
    NamedParameter(...)
  ),")"),
  FunctionInvocation(VariableName,"(",NamedParameters(
    NamedParameter(...),
    NamedParameter(ParameterName(SpecialParameterName(decimal,separator)),StringLiteral),
    NamedParameter(ParameterName(SpecialParameterName(grouping,separator)),StringLiteral)
  ),")"),

  DateTimeLiteral(...),
  FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")"),

  PathExpression(FunctionInvocation(...),Name),

  FunctionInvocation(...),
  FunctionInvocation(...)
)


# Instance Of / List

a instance of list< context< foo: function<foo> -> bar > >;
a instance of list<boolean>;

==>

Expressions(
  InstanceOfExpression(VariableName,instance,of,Type(
    ListType(list,"<",Type(
      ContextType(context,"<",ContextEntryTypes(
        ContextEntryType(Name,Type(
          FunctionType(function,"<",ArgumentTypes(
            ArgumentType(Type(
              QualifiedName(Name)
            ))
          ),">",Type(
            QualifiedName(Name)
          ))
        ))
      ),">")
    ),">")
  )),
  InstanceOfExpression(VariableName,instance,of,Type(
    ListType(list,"<",Type(
      QualifiedName(Name)
    ),">")
  )),
)


# Instance Of / Function

a instance of function<string> -> string;
a instance of function<string, boolean> -> string;
a instance of function<> -> string;

==>

Expressions(
  InstanceOfExpression(VariableName,instance,of,Type(
    FunctionType(function,"<",ArgumentTypes(
      ArgumentType(Type(
        QualifiedName(Name)
      ))
    ),">",Type(QualifiedName(Name)))
  )),
  InstanceOfExpression(VariableName,instance,of,Type(
    FunctionType(function,"<",ArgumentTypes(
      ArgumentType(Type(
        QualifiedName(Name)
      )),
      ArgumentType(Type(
        QualifiedName(Name)
      ))
    ),">",Type(
      QualifiedName(Name)
    ))
  )),
  InstanceOfExpression(VariableName,instance,of,Type(
    FunctionType(function,"<",ArgumentTypes,">",Type(
      QualifiedName(Name)
    ))
  ))
)

# Instance Of / Context

a instance of context<foo: string>;

==>

Expressions(
  InstanceOfExpression(VariableName,instance,of,Type(
    ContextType(context,"<",ContextEntryTypes(
      ContextEntryType(Name,Type(
        QualifiedName(Name)
      ))
    ),">")
  ))
)


# Instance Of / Qualified Name

a instance of string;
a instance of b.C;
a instance of b

==>

Expressions(
  InstanceOfExpression(VariableName,instance,of,Type(
    QualifiedName(Name)
  )),
  InstanceOfExpression(VariableName,instance,of,Type(
    QualifiedName(Name,Name)
  )),
  InstanceOfExpression(VariableName,instance,of,Type(
    QualifiedName(Name)
  ))
)


# Instance Of / Date Time Literals

a instance of years and months duration
a instance of days and time duration
a instance of date and time

==>

Expressions(
  InstanceOfExpression(VariableName,instance,of,Type(SpecialType(years,and,months,duration))),
  InstanceOfExpression(VariableName,instance,of,Type(SpecialType(days,and,time,duration))),
  InstanceOfExpression(VariableName,instance,of,Type(SpecialType(date,and,time)))
)


# Simple Positive Unary Test

>= 10;
> a;
>= a.b

==>

Expressions(
  SimplePositiveUnaryTest(CompareOp,NumericLiteral),
  SimplePositiveUnaryTest(CompareOp,QualifiedName(...)),
  SimplePositiveUnaryTest(CompareOp,QualifiedName(...))
)


# Grouping

1 + a

==>

Expressions(
  ArithmeticExpression[group="Expression"](
    NumericLiteral[group="Expression Literal"],
    ArithOp,
    VariableName[group="Expression"]
  )
)