# Literals

1
true
false
"FOO";
-1220.12
.12
24 10

==>

Expressions(
  NumericLiteral,
  BooleanLiteral,
  BooleanLiteral,
  StringLiteral,
  NumericLiteral(ArithOp),
  NumericLiteral,
  NumericLiteral,
  NumericLiteral
)


# ArithmeticExpression

1+2
1-2
1*2
1^2
1**2
1/2;
-1
1+2*3**5

==>

Expressions(
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral),
  NumericLiteral(ArithOp),
  ArithmeticExpression(NumericLiteral,ArithOp,
    ArithmeticExpression(NumericLiteral,ArithOp,
      ArithmeticExpression(NumericLiteral,ArithOp,NumericLiteral)))
)


# ArithmeticExpression (error)

1 * #3

==>

Expressions(
  ArithmeticExpression(NumericLiteral,ArithOp,⚠,NumericLiteral)
)


# Comparison

a = b
a != b
a > b
a < b

a between b and c
a between b() and c-d

INPUT in 10

a in [ 1 .. 4 ]
a in [1..4]
a in ([ 1 .. 4 ])
a in (1..4)
a in (((1..4)))
a in ((1..4), (5..8))
a in (< 20, > 10)

==>

Expressions(
  Comparison(VariableName(...),CompareOp,VariableName(...)),
  Comparison(VariableName(...),CompareOp,VariableName(...)),
  Comparison(VariableName(...),CompareOp,VariableName(...)),
  Comparison(VariableName(...),CompareOp,VariableName(...)),

  Comparison(VariableName(...),between,VariableName(...),and,VariableName(...)),
  Comparison(VariableName(...),between, FunctionInvocation(...),and,ArithmeticExpression(...)),

  Comparison(VariableName(...),in,PositiveUnaryTest(NumericLiteral)),

  Comparison(VariableName(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(VariableName(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(VariableName(...),in,PositiveUnaryTest(ParenthesizedExpression("(",SimplePositiveUnaryTest(Interval(...)),")"))),
  Comparison(VariableName(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(VariableName(...),in,PositiveUnaryTest(ParenthesizedExpression("(",ParenthesizedExpression(...),")"))),
  Comparison(VariableName(...),in,"(",PositiveUnaryTests(...),")"),
  Comparison(VariableName(...),in,"(",PositiveUnaryTests(...),")")
)


# Conjunction and Disjunction

a and b;
a or b;
a and b or c and d

==>

Expressions(
  Conjunction(VariableName(...),and,VariableName(...)),
  Disjunction(VariableName(...),or,VariableName(...)),
  Disjunction(
    Conjunction(VariableName(...),and,VariableName(...)),or,Conjunction(VariableName(...),and,VariableName(...))
  )
)


# ParenthesizedExpression

(a);
(a + b) * c

==>

Expressions(
  ParenthesizedExpression(...),
  ArithmeticExpression(...)
)


# ParenthesizedExpression (special)

(({ a+: { b-: 1 } }).a+).b-

==>

Expressions(
  PathExpression(
    ParenthesizedExpression("(",
      PathExpression(
        ParenthesizedExpression("(",
          Context("{",
            ContextEntry(Key(Name(...)),Context("{",
              ContextEntry(Key(Name(...)),NumericLiteral),"}")
            ),
          "}"),
        ")"),
        VariableName(...)
      ),
    ")"),
    VariableName(...)
  )
)


# null

null[1]
null.foo
{ a: null }.a.b
null and true
1 - null

==>

Expressions(
  FilterExpression(null,"[",NumericLiteral,"]"),
  PathExpression(null,VariableName(...)),
  PathExpression(
    PathExpression(
      Context("{",
        ContextEntry(Key(Name(...)),null),
      "}"),
      VariableName(...)
    ),
    VariableName(...)
  ),
  Conjunction(null,and,BooleanLiteral),
  ArithmeticExpression(NumericLiteral,ArithOp,null)
)



# Context (simple)

{
  a: 1,
  b: a
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(Name(Identifier)),NumericLiteral),
    ContextEntry(Key(Name(Identifier)),VariableName(Identifier)),
  "}")
)


# Context

{}
{ a: a, b: b }
{🐎: "😀"}
{java:{class:"java.lang.Math",method signature:"cos(double)"}}

==>

Expressions(
  Context("{","}"),
  Context("{",ContextEntry(Key(Name(...)),VariableName(...)),ContextEntry(Key(Name(...)),VariableName(...)),"}"),
  Context("{",ContextEntry(Key(Name(Identifier)),StringLiteral),"}"),
  Context("{",
    ContextEntry(Key(Name(...)),Context("{",
      ContextEntry(Key(Name(...)),StringLiteral),
      ContextEntry(Key(Name(...)),StringLiteral),
    "}")),
  "}")
)


# Context (multi-name)

{
  cats and dogs: "C_D",
  add the horse: cats and dogs + "Horse"
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(Name(...)),StringLiteral),
    ContextEntry(Key(Name(...)),ArithmeticExpression(
      VariableName(...),ArithOp,StringLiteral
    ))
  "}")
)


# Context (name parts)

{
  a + b: 1,
  a + 00: 1
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(Name(...)),NumericLiteral),
    ContextEntry(Key(Name(...)),NumericLiteral),
  "}")
)



# Context (error)

{

==>

Expressions(
  Context(⚠)
)


# Context (special key)

{
  Mike's: 23,
  A+B    : 100,
  if   foo: true,
  f + 10: 1,
  true: false
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(Name(Identifier,Identifier,Identifier)),NumericLiteral),
    ContextEntry(Key(Name(Identifier,Identifier,Identifier)),NumericLiteral),
    ContextEntry(Key(Name(Identifier,Identifier)),BooleanLiteral),
    ContextEntry(Key(Name(Identifier,Identifier,Identifier)),NumericLiteral),
    ContextEntry(Key(Name(Identifier)),BooleanLiteral),
  "}")
)


# Context (special key, binding)

{
  A+B    : 100,
  c: A + B - 1
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(Name(Identifier,Identifier,Identifier)),NumericLiteral),
    ContextEntry(Key(Name(Identifier)),ArithmeticExpression(
      VariableName(Identifier, Identifier, Identifier),
      ArithOp,
      NumericLiteral
    )),
  "}")
)


# Context (literal key)

{
  "A -  c": 100,
  c: A-c
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(StringLiteral),NumericLiteral),
    ContextEntry(Key(Name(...)),VariableName(...)),
  "}")
)


# Context / ArithmeticExpression

{
  a+b: 10 + 10,
  c: a+b - 10
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(Name(Identifier,Identifier,Identifier)),ArithmeticExpression(
      NumericLiteral,ArithOp,NumericLiteral
    )),
    ContextEntry(Key(Name(Identifier)),ArithmeticExpression(
      VariableName(Identifier,Identifier,Identifier),ArithOp,NumericLiteral
    )),
  "}")
)


# Context / FunctionDefinition / FunctionInvocation

({
  foo: function(a + b) a +b + 5,
  b++: foo(5)
}).b++

==>

Expressions(
  PathExpression(
    ParenthesizedExpression("(",
      Context("{",
        ContextEntry(
          Key(Name(Identifier)),
          FunctionDefinition(function,"(",FormalParameters(
            FormalParameter(ParameterName(Name(...)))
          ),")",FunctionBody(
            ArithmeticExpression(VariableName(...),ArithOp,NumericLiteral)
          ))
        ),
        ContextEntry(
          Key(Name(...)),FunctionInvocation(
            VariableName(Identifier),
            "(",PositionalParameters(NumericLiteral),")"
          )
        ),
      "}"),
    ")"),
    VariableName(...)
  )
)


# Interval

[a..b];
(a..b);
]a..b[;
[1 .. 2];
(1 .. 2);
]1 .. 2[

==>

Expressions(
  SimplePositiveUnaryTest(Interval("[",QualifiedName(VariableName(...)),QualifiedName(VariableName(...)),"]")),
  SimplePositiveUnaryTest(Interval("(",QualifiedName(VariableName(...)),QualifiedName(VariableName(...)),")")),
  SimplePositiveUnaryTest(Interval("]",QualifiedName(VariableName(...)),QualifiedName(VariableName(...)),"[")),
  SimplePositiveUnaryTest(Interval("[",NumericLiteral,NumericLiteral,"]")),
  SimplePositiveUnaryTest(Interval("(",NumericLiteral,NumericLiteral,")")),
  SimplePositiveUnaryTest(Interval("]",NumericLiteral,NumericLiteral,"["))
)


# Interval (multi-name)

[a.b..b c d]

==>

Expressions(
  SimplePositiveUnaryTest(
    Interval("[",QualifiedName(VariableName(...),VariableName(...)),QualifiedName(VariableName(...)),"]")
  )
)


# Interval (error)

[a..b;
[a..;

==>

Expressions(
  SimplePositiveUnaryTest(Interval("[",QualifiedName(VariableName(...)),QualifiedName(VariableName(...)),⚠)),
  SimplePositiveUnaryTest(Interval("[",QualifiedName(VariableName(...)),⚠))
)


# List

[];
[1];
[1 + 3, 2 * 5];
[a, [1, { a: 1 } ], [], [1 .. 3], (1) ]

==>

Expressions(
  List("[","]"),
  List("[",NumericLiteral,"]"),
  List("[",ArithmeticExpression(...),ArithmeticExpression(...),"]"),
  List(...)
)


# Interval / List (error)

[a;
[

==>

Expressions(
  SimplePositiveUnaryTest(Interval("[",QualifiedName(...),⚠)),
  List("[",⚠)
)


# VariableName (simple)

a
aas
ﷰͿ

==>

Expressions(
  VariableName(...),
  VariableName(...),
  VariableName(...)
)


# VariableName (unicode)

🐎

==>

Expressions(
  VariableName(Identifier)
)


# VariableName (spaced)

a b c
aas asda

==>

Expressions(
  VariableName(Identifier, Identifier, Identifier),
  VariableName(Identifier, Identifier)
)


# VariableName (contextual) { "context": { "Foo + Bar": 1, "if foo then": 1, "true": 1, "f + 10": 1 } }

Foo +  Bar
Foo + Bar
Foo+Bar
if foo then
true
f + 10

==>

Expressions(
  VariableName(Identifier,Identifier,Identifier),
  VariableName(Identifier,Identifier,Identifier),
  VariableName(Identifier,Identifier,Identifier),
  VariableName(Identifier,Identifier,Identifier),
  VariableName(Identifier),
  VariableName(Identifier,Identifier,Identifier)
)


# VariableName (error)

a**'s

==>

Expressions(
  ArithmeticExpression(VariableName(...),ArithOp,⚠,VariableName(...))
)


# VariableName (spaced, keyword error)

a if

==>

Expressions(
  VariableName(Identifier),
  IfExpression(if,⚠)
)


# Special Names

date and time
date and other
year

==>

Expressions(
  Conjunction(VariableName(...),and,VariableName(...)),
  Conjunction(VariableName(...),and,VariableName(...)),
  VariableName(...)
)


# QuantifiedExpression

every a in b satisfies c
some a in b satisfies c
every a in b, c in d satisfies c
some a in b, c in d satisfies c

==>

Expressions(
  QuantifiedExpression(every,InExpressions(InExpression(...)),satisfies,VariableName(...)),
  QuantifiedExpression(some,InExpressions(InExpression(...)),satisfies,VariableName(...)),
  QuantifiedExpression(every,InExpressions(InExpression(...),InExpression(...)),satisfies,VariableName(...)),
  QuantifiedExpression(some,InExpressions(InExpression(...),InExpression(...)),satisfies,VariableName(...))
)


# QuantifiedExpression (multi-name)

every
  falk made in []
satisfies
  falk made.foo bar

==>

Expressions(
  QuantifiedExpression(
    every,InExpressions(
      InExpression(Name(...),in,List("[","]"))
    ), satisfies, PathExpression(
      VariableName(...),
      VariableName(...)
    )
  )
)


# QuantifiedExpression (special)

every
  a+ in [ { b-: 1 }]
satisfies
  a+.b-

==>

Expressions(
  QuantifiedExpression(
    every,InExpressions(
      InExpression(Name(...),in,List("[",
        Context("{",ContextEntry(Key(Name(...)),NumericLiteral),"}"),
      "]"))
    ),satisfies,
    PathExpression(
      VariableName(...),
      VariableName(...)
    )
  )
)


# FilterExpression

a[c]
a[c].b
["a", "b"][ "b" ]

==>

Expressions(
  FilterExpression(VariableName(...),"[",VariableName(...),"]"),
  PathExpression(FilterExpression(VariableName(...),"[",VariableName(...),"]"),VariableName(...)),
  FilterExpression(List("[",StringLiteral,StringLiteral,"]"),"[",StringLiteral,"]")
)


# FilterExpression (special)

[ { a+: 1 } ][ a+ > 2]

==>

Expressions(
  FilterExpression(
    List("[",
      Context("{",
        ContextEntry(Key(Name(...)),NumericLiteral),
      "}"),
    "]"),
    "[",
      Comparison(VariableName(...),CompareOp,NumericLiteral),
    "]"
  )
)


# FilterExpression (special, item)

[{a+: { b-: 2 }}][item.a+.b- > 2]

==>

Expressions(
  FilterExpression(
    List("[",Context("{",
      ContextEntry(Key(Name(...)),Context("{",
        ContextEntry(Key(Name(...)),NumericLiteral),
      "}")),
    "}"),"]"),
    "[",
      Comparison(
        PathExpression(
          PathExpression(
            VariableName(...),VariableName(...)
          ),
          VariableName(...)
        ),CompareOp,NumericLiteral
      ),
    "]"
  )
)


# PathExpression

a.B
(a).b
(a).b.c
a+b.c

==>

Expressions(
  PathExpression(VariableName(...),VariableName(...)),
  PathExpression(ParenthesizedExpression(...),VariableName(...)),
  PathExpression(PathExpression(ParenthesizedExpression(...),VariableName(...)),VariableName(...)),
  ArithmeticExpression(VariableName(...),ArithOp,PathExpression(VariableName(...),VariableName(...)))
)


# PathExpression (special) { "context": { "Foo + Bar": { "o++": { } } } }

Foo + Bar.o++.blub

==>

Expressions(
  PathExpression(
    PathExpression(
      VariableName(...),
      VariableName(...)
    ),
    VariableName(...)
  )
)


# ForExpression

for a in c return d
for a in c, b in d return d

==>

Expressions(
  ForExpression(for,InExpressions(...),return,VariableName(...)),
  ForExpression(for,InExpressions(
    InExpression(...),
    InExpression(...)
  ),return,VariableName(...))
)


# ForExpression (iteration range)

for i in 0..4 return i

==>

Expressions(
  ForExpression(for,InExpressions(
    InExpression(Name(Identifier),in,IterationContext(
      NumericLiteral,
      NumericLiteral
    ))
  ),return,VariableName(Identifier))
)


# ForExpression (iteration range, dynamic) { "context": { "c": { "b+": 1 } } }

for i in 1..c return i.b+

==>

Expressions(
  ForExpression(for,InExpressions(
    InExpression(Name(...),in,IterationContext(
      NumericLiteral,VariableName(...)
    ))
  ),return,PathExpression(
    VariableName(...),
    VariableName(...)
  ))
)


# ForExpression (partial)

for i in [ 0, 1, 2 ] return partial[-1]

==>

Expressions(
  ForExpression(for,InExpressions(
    InExpression(Name(Identifier),in,IterationContext(
      List("[",NumericLiteral,NumericLiteral,NumericLiteral,"]"))
    )
  ),return,FilterExpression(
    VariableName(Identifier),"[",NumericLiteral(ArithOp),"]")
  )
)


# ForExpression (special, partial)

for i in [1] return if i = 1 then { a+: 1 } else partial[-1].a+

==>

Expressions(
  ForExpression(
    for,InExpressions(
      InExpression(Name(...),in,IterationContext(
        List("[",NumericLiteral,"]")
      ))
    ),
    return,IfExpression(
      if,Comparison(
        VariableName(...),CompareOp,NumericLiteral
      ),
      then, Context("{",
        ContextEntry(Key(Name(...)),NumericLiteral),
      "}"),
      else,PathExpression(
        FilterExpression(VariableName(...),"[",NumericLiteral(ArithOp),"]"),
        VariableName(...)
      )
    )
  )
)



# ForExpression (multi-name)

for
  falk made in []
return
  falk made.foo bar

==>

Expressions(
  ForExpression(
    for,InExpressions(
      InExpression(Name(...),in,IterationContext(...))
    ),return,PathExpression(VariableName(...), VariableName(...))
  )
)


# ForExpression (special)

for
  a+ in [ { b-: 1 }]
return
  a+.b-

==>

Expressions(
  ForExpression(
    for,InExpressions(
      InExpression(Name(...),in,IterationContext(...))
    ),return,PathExpression(VariableName(...), VariableName(...))
  )
)


# ForExpression (error)

for fruit in [ ." ]

==>

Expressions(
  ForExpression(for,InExpressions(...),⚠),
  StringLiteral
)


# IfExpression (special)

(if foo then { a+: 1 } else { b-: 1 }).a+

==>

Expressions(
  PathExpression(
    ParenthesizedExpression("(",
      IfExpression(
        if,VariableName(...),
        then,Context("{",
          ContextEntry(Key(Name(...)),NumericLiteral),
        "}"),
        else,Context("{",
          ContextEntry(Key(Name(...)),NumericLiteral),
        "}")
      ),
    ")"),
    VariableName(...)
  )
)


# FunctionDefinition

function() a
function(a, b) a
function(a, b) external a
function(n1) external {java:{class:"java.lang.Math",method signature:"cos(double)"}}

==>

Expressions(
  FunctionDefinition(function,"(",FormalParameters,")",FunctionBody(...)),
  FunctionDefinition(function,"(",FormalParameters(
    FormalParameter(ParameterName(...)),
    FormalParameter(...)
  ),")",FunctionBody(...)),
  FunctionDefinition(function,"(",FormalParameters(...),")",external,FunctionBody(...)),
  FunctionDefinition(...)
)


# FunctionDefinition (special)

function(a+b) a+b
function(a+1) a+1
function(a ++) a + +

==>

Expressions(
  FunctionDefinition(function,"(",
    FormalParameters(
      FormalParameter(ParameterName(Name(...)))
    ),")",
    FunctionBody(
      VariableName(...)
    )
  ),
  FunctionDefinition(function,"(",
    FormalParameters(
      FormalParameter(ParameterName(Name(...)))
    ),")",
    FunctionBody(
      VariableName(...)
    )
  ),
  FunctionDefinition(function,"(",
    FormalParameters(
      FormalParameter(ParameterName(Name(...)))
    ),")",
    FunctionBody(
      VariableName(...)
    )
  )
)


# FunctionDefinition (special, return type)

{
  a: function() { a+: { b-: 1 } },
  b: a().a+.b-
}

==>

Expressions(
  Context("{",
    ContextEntry(
      Key(Name(...)),
      FunctionDefinition(function,"(",FormalParameters,")",
        FunctionBody(
          Context("{",
            ContextEntry(Key(Name(...)),
              Context("{",
                ContextEntry(Key(Name(...)),NumericLiteral),
              "}")
            ),
          "}")
        )
      )
    ),
    ContextEntry(
      Key(Name(...)),
      PathExpression(
        PathExpression(
          FunctionInvocation(
            VariableName(...),"(",PositionalParameters,")"
          ),
          VariableName(...)
        ),
        VariableName(...)
      )
    ),
  "}")
)


# FunctionInvocation (positional)

a()
a(foo, bar, other)

==>

Expressions(
  FunctionInvocation(VariableName(...),"(",PositionalParameters(), ")"),
  FunctionInvocation(VariableName(...),"(",PositionalParameters(
    VariableName(...),
    VariableName(...),
    VariableName(...)
  ),")")
)


# FunctionInvocation (named)

a(foo: f, bar: b, other: o)
a(stringa: f, bar: b)
a(string: f, bar: b)

==>

Expressions(
  FunctionInvocation(VariableName(...),"(",NamedParameters(
    NamedParameter(ParameterName(...),VariableName(...)),
    NamedParameter(ParameterName(...),VariableName(...)),
    NamedParameter(ParameterName(...),VariableName(...))
  ),")"),
  FunctionInvocation(VariableName(...),"(",NamedParameters(
    NamedParameter(ParameterName(...),VariableName(...)),
    NamedParameter(ParameterName(...),VariableName(...))
  ),")"),
  FunctionInvocation(VariableName(...),"(",NamedParameters(
    NamedParameter(ParameterName(...),VariableName(...)),
    NamedParameter(ParameterName(...),VariableName(...))
  ),")")
)


# FunctionInvocation (multi-name)

a b c d()
with spaces()

==>

Expressions(
  FunctionInvocation(VariableName(...),"(",PositionalParameters(), ")"),
  FunctionInvocation(VariableName(...),"(",PositionalParameters(), ")")
)


# FunctionInvocation (literal args)

abs( -10 )
append("foo", "bar")
contains(["foo"], "bar")

==>

Expressions(
  FunctionInvocation(VariableName(...),"(",PositionalParameters(...),")"),
  FunctionInvocation(VariableName(...),"(",PositionalParameters(
    StringLiteral, StringLiteral
  ),")"),
  FunctionInvocation(VariableName(...),"(",PositionalParameters(
    List("[",StringLiteral,"]"),StringLiteral
  ),")")
)


# DateTimeLiteral / DateTimeConstructor

date and time(date("2017-01-01"),time("23:59:01"))
date and  time("2018-12-08T10:30:01")
time("23:59:01")
date("2017-01-01")
duration("P2M")

==>

Expressions(
  DateTimeLiteral(DateTimeConstructor(date,and,time),"(",PositionalParameters(
    DateTimeLiteral(...),
    DateTimeLiteral(...)
  ),")"),
  DateTimeLiteral(...),
  DateTimeLiteral(...),
  DateTimeLiteral(...),
  DateTimeLiteral(...)
)


# DateTimeLiteral / AtLiteral

@"2019-03-31"
@"PT01H"

==>

Expressions(
  DateTimeLiteral(AtLiteral(StringLiteral)),
  DateTimeLiteral(AtLiteral(StringLiteral))
)


# DateTimeLiteral / AtLiteral (error)

@ "2019-03-31"

==>

Expressions(
  DateTimeLiteral(AtLiteral(⚠)), StringLiteral
)


# DateTimeLiteral / Comparison

time("10:30:05") in [time("10:30:02")..time("10:30:04")]
duration("P11Y") in [[duration("P5Y") .. duration("P7Y")], [duration("P10Y") .. duration("P12Y")]]
date and time("2018-12-08T10:30:01") in (date and time("2018-12-08T10:30:02")..date and time("2018-12-08T10:30:04")]
date("2018-12-01") in (date("2018-12-02")..date("2018-12-04"))

==>

Expressions(
  Comparison(DateTimeLiteral(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(DateTimeLiteral(...),in,PositiveUnaryTest(List(...))),
  Comparison(DateTimeLiteral(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...)))),
  Comparison(DateTimeLiteral(...),in,PositiveUnaryTest(SimplePositiveUnaryTest(Interval(...))))
)


# DateTimeLiteral / Conjunction

a > 5 and years and months duration()
years and months duration() and a > 5
date and  time("2018-12-08T10:30:01") and 20

==>

Expressions(
  Conjunction(
    Comparison(...),and,FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")")
  ),
  Conjunction(
    FunctionInvocation(
      SpecialFunctionName(...),"(",PositionalParameters,")"
    ),and,Comparison(...)
  ),
  Conjunction(DateTimeLiteral(...),and,NumericLiteral)
)


# Special Function Name / Conjunction

years and months duration() and a > 5

==>

Expressions(
  Conjunction(
    FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")"),and,Comparison(...)
  )
)


# Conjunction / Special Function Name(...)

a > 5 and years and months duration()

==>

Expressions(
  Conjunction(
    Comparison(...),and,FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")")
  )
)


# Context (variable scopes)

{
  foo: function(a) a + 1,
  bar: foo(a),
  other: foo.bar[woop=1]
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(Name(...)),FunctionDefinition(function,"(",FormalParameters(FormalParameter(ParameterName(...))),")",FunctionBody(ArithmeticExpression(VariableName(...),ArithOp,NumericLiteral)))),
    ContextEntry(Key(Name(...)),FunctionInvocation(VariableName(...),"(",PositionalParameters(VariableName(...)),")")),
    ContextEntry(Key(Name(...)),FilterExpression(PathExpression(VariableName(...),VariableName(...)),"[",Comparison(VariableName(...),CompareOp,NumericLiteral),"]")),"}")
)


# Context (variable scopes, nested)

{
  a vc: {
    foo++: 5
  },
  b: a vc.foo++
}

==>

Expressions(
  Context("{",
    ContextEntry(Key(Name(...)),Context("{",
      ContextEntry(Key(Name(...)),NumericLiteral),
    "}")),
    ContextEntry(Key(Name(...)),PathExpression(
      VariableName(...),
      VariableName(...)
    )),
  "}")
)


# FunctionDefinition (variable scopes)

function(a) a + 1
function(b: foo, c) b.today() + c

==>

Expressions(
  FunctionDefinition(function,"(",
    FormalParameters(
      FormalParameter(ParameterName(Name(Identifier)))
    ),
  ")",FunctionBody(
    ArithmeticExpression(VariableName(Identifier),ArithOp,NumericLiteral)
  )),
  FunctionDefinition(function,"(",
    FormalParameters(
      FormalParameter(ParameterName(Name(Identifier)),Type(QualifiedName(VariableName(...)))),
      FormalParameter(ParameterName(Name(Identifier)))
    ),
  ")",FunctionBody(
    ArithmeticExpression(FunctionInvocation(PathExpression(VariableName(Identifier),VariableName(Identifier)),"(",PositionalParameters,")"),ArithOp,VariableName(Identifier))
  ))
)


# QuantifiedExpression (variable scopes)

every a a in b, dd in [] satisfies a a < dd - c

===>

Expressions(
  QuantifiedExpression(
    every,InExpressions(
      InExpression(Name(...),in,VariableName(...)),
      InExpression(Name(...),in,List("[","]"))
    ),satisfies,Comparison(
      VariableName(...),CompareOp,ArithmeticExpression(
        VariableName(...),ArithOp,VariableName(...)
      )
    )
  )
)


# ForExpression (variable scopes)

for a a in b, dd in [] return [ a a, dd, c ]

===>

Expressions(
  ForExpression(for,InExpressions(
    InExpression(Name(...),in,IterationContext(VariableName(...))),
    InExpression(Name(...),in,IterationContext(List("[","]")))
  ),return,List("[",
    VariableName(...),VariableName(...),VariableName(...),
  "]"))
)


# FunctionInvocation (variable scopes)

foo(bar)

===>

Expressions(
  FunctionInvocation(
    VariableName(...),"(",PositionalParameters(VariableName(Identifier)),")"
  )
)


# Expression (variable scopes)

a + foo.bar[foo=1]

===>

Expressions(
  ArithmeticExpression(
    VariableName(...),ArithOp,FilterExpression(
      PathExpression(VariableName(...),VariableName(...)),"[",Comparison(
        VariableName(...),CompareOp,NumericLiteral
      ),"]"
    )
  )
)


# Built-in Functions

not(false)
sort([1, 2, 3])
concatenate([1, 2], [3, 4])
string(5)

substring(string:"foobar",start position :3)
number(from: "1.000.000,01", decimal sep:",", grouping sep:".")
number(from: "1.000.000,01", decimal separator:",", grouping separator:".")

date and time("2018-12-08T10:30:01")
years and months duration()

string(5).length

list contains([1, 2], 1)
distinct values(1, 1, 4)

==>

Expressions(
  FunctionInvocation(VariableName(...),"(",PositionalParameters(BooleanLiteral),")"),
  FunctionInvocation(VariableName(...),"(",PositionalParameters(List(...)),")"),
  FunctionInvocation(VariableName(...),"(",PositionalParameters(List(...),List(...)),")"),
  FunctionInvocation(VariableName(...),"(",PositionalParameters(NumericLiteral),")"),

  FunctionInvocation(VariableName(...),"(",NamedParameters(
    NamedParameter(...),
    NamedParameter(ParameterName(...),NumericLiteral)
  ),")"),
  FunctionInvocation(VariableName(...),"(",NamedParameters(
    NamedParameter(...),
    NamedParameter(ParameterName(...),StringLiteral),
    NamedParameter(...)
  ),")"),
  FunctionInvocation(VariableName(...),"(",NamedParameters(
    NamedParameter(...),
    NamedParameter(ParameterName(...),StringLiteral),
    NamedParameter(ParameterName(...),StringLiteral)
  ),")"),

  DateTimeLiteral(...),
  FunctionInvocation(SpecialFunctionName(...),"(",PositionalParameters,")"),

  PathExpression(FunctionInvocation(...),VariableName(...)),

  FunctionInvocation(...),
  FunctionInvocation(...)
)


# Instance Of / List

a instance of list< context< foo: function<foo> -> bar > >
a instance of list<boolean>

==>

Expressions(
  InstanceOfExpression(VariableName(...),instance,of,Type(
    ListType(list,"<",Type(
      ContextType(context,"<",ContextEntryTypes(
        ContextEntryType(Name(...),Type(
          FunctionType(function,"<",ArgumentTypes(
            ArgumentType(Type(
              QualifiedName(VariableName(...))
            ))
          ),">",Type(
            QualifiedName(VariableName(...))
          ))
        ))
      ),">")
    ),">")
  )),
  InstanceOfExpression(VariableName(...),instance,of,Type(
    ListType(list,"<",Type(
      QualifiedName(VariableName(...))
    ),">")
  )),
)


# Instance Of / Function

a instance of function<string> -> string
a instance of function<string, boolean> -> string
a instance of function<> -> string

==>

Expressions(
  InstanceOfExpression(VariableName(...),instance,of,Type(
    FunctionType(function,"<",ArgumentTypes(
      ArgumentType(Type(
        QualifiedName(VariableName(...))
      ))
    ),">",Type(QualifiedName(VariableName(...))))
  )),
  InstanceOfExpression(VariableName(...),instance,of,Type(
    FunctionType(function,"<",ArgumentTypes(
      ArgumentType(Type(
        QualifiedName(VariableName(...))
      )),
      ArgumentType(Type(
        QualifiedName(VariableName(...))
      ))
    ),">",Type(
      QualifiedName(VariableName(...))
    ))
  )),
  InstanceOfExpression(VariableName(...),instance,of,Type(
    FunctionType(function,"<",ArgumentTypes,">",Type(
      QualifiedName(VariableName(...))
    ))
  ))
)

# Instance Of / Context

a instance of context<foo: string, bar: string>

==>

Expressions(
  InstanceOfExpression(VariableName(...),instance,of,Type(
    ContextType(context,"<",ContextEntryTypes(
      ContextEntryType(Name(...),Type(QualifiedName(VariableName(...)))),
      ContextEntryType(Name(...),Type(QualifiedName(VariableName(...))))
    ),">")
  ))
)


# Instance Of / Qualified Name(...)

a instance of string
a instance of b.C
a instance of b

==>

Expressions(
  InstanceOfExpression(VariableName(...),instance,of,Type(
    QualifiedName(VariableName(...))
  )),
  InstanceOfExpression(VariableName(...),instance,of,Type(
    QualifiedName(VariableName(...),VariableName(...))
  )),
  InstanceOfExpression(VariableName(...),instance,of,Type(
    QualifiedName(VariableName(...))
  ))
)


# Instance Of / DateTimeLiteral

a instance of years and months duration
a instance of days and time duration
a instance of date and time

==>

Expressions(
  InstanceOfExpression(VariableName(...),instance,of,Type(SpecialType(years,and,months,duration))),
  InstanceOfExpression(VariableName(...),instance,of,Type(SpecialType(days,and,time,duration))),
  InstanceOfExpression(VariableName(...),instance,of,Type(SpecialType(date,and,time)))
)


# Simple Positive Unary Test

>= 10
> a
>= a.b.c

==>

Expressions(
  SimplePositiveUnaryTest(CompareOp,NumericLiteral),
  SimplePositiveUnaryTest(CompareOp,QualifiedName(...)),
  SimplePositiveUnaryTest(CompareOp,QualifiedName(...))
)


# Grouping

1 + a

==>

Expressions(
  ArithmeticExpression[group="Expression"](
    NumericLiteral[group="Expression Literal"],
    ArithOp,
    VariableName(...)
  )
)


# VariableName (contextual) { "context": { "foo'a **": 1, "aa**": 1, "a - b": 1, "a * b": 1, "what if?": 1, "Profit and loss": 1 } }

foo'a  **
aa**
a-b
a * b
what if?
Profit and loss

==>

Expressions(
  VariableName(Identifier,Identifier,Identifier,Identifier,Identifier),
  VariableName(Identifier,Identifier,Identifier),
  VariableName(Identifier,Identifier,Identifier),
  VariableName(Identifier,Identifier,Identifier),
  VariableName(Identifier,Identifier),
  VariableName(Identifier,Identifier,Identifier)
)


# VariableName (incomplete, error) { "context": { "foo'a aa**": 1 } }

foo'a

==>

Expressions(VariableName(Identifier,⚠,Identifier))


# VariableName (Mike's age) { "context": { "Mike's age": 35 } }

for
  person in [ ]
return
  Mike's age

==>

Expressions(
  ForExpression(for,InExpressions(
    InExpression(
      Name(Identifier),in,IterationContext(...))
    ),return,
    VariableName(Identifier,Identifier,Identifier,Identifier)
  )
)